from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove

from tg_bot_for_bank.db.database_handler import update_position_id, get_all_employees_list_from_db, \
    get_user_FIO_from_db, get_all_employees_from_db, un_block_empolyee
from tg_bot_for_bank.keyboards.simple_row import make_row_inline_keyboard, make_row_inline_keyboard_mutiple, \
    make_row_keyboard, sup_admin_keyboard, make_row_keyboard_mutiple
from tg_bot_for_bank.services.message_deleter import delete_messages
from tg_bot_for_bank.services.sender import send_to

sup_admin_router = Router()


class ActionState(StatesGroup):
    start_state = State()
    employee_list_state = State()
    admin_list_state = State()
    inf_msg = State()
    inf_msg_entr = State()
    inf_msg_success = State()

class UserManagState(StatesGroup):
    user_manag = State()
    employee_block = State()
    employee_block_success = State()
    employee_unlock = State()
    employee_unlock_success = State()
    employee_change_role = State()

@sup_admin_router.message(ActionState.start_state)
async def information_message_success(message: Message, state: FSMContext):
    await state.clear()


@sup_admin_router.message(F.text.lower() == "–∑–∞–ø—Ä–æ—Å—ã")
async def emlist2(message: Message, state: FSMContext):
    message_ids_to_delete = [message.message_id - i for i in range(1, 2)]
    await delete_messages(message.chat.id, message_ids_to_delete)


@sup_admin_router.message(F.text.lower() == "üì¢ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def information_message(message: Message, state: FSMContext):
    await state.set_state(ActionState.inf_msg_entr)

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º üëá",
        reply_markup=make_row_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"])
    )

@sup_admin_router.message(
    F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞",
    UserManagState.employee_block
)
@sup_admin_router.message(
    F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞",
    UserManagState.employee_unlock
)
@sup_admin_router.message(F.text.lower() == "üë• —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def employees_buttons_manage(message: Message, state: FSMContext):
    await state.set_state(UserManagState.user_manag)

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        parse_mode='HTML',
        reply_markup=make_row_keyboard_mutiple([
            ["üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
            ["üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"],
            ["üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        )
    )

@sup_admin_router.message(
    F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞",
    ActionState.inf_msg_entr
)
@sup_admin_router.message(F.text.lower() == "üîô –Ω–∞–∑–∞–¥")
async def employees_buttons(message: Message, state: FSMContext):
    if ActionState.employee_list_state or ActionState.admin_list_state:
        message_ids_to_delete = [message.message_id - i for i in range(0, 4)]
        await delete_messages(message.chat.id, message_ids_to_delete)
    else:
        message_ids_to_delete = [message.message_id - i for i in range(0, 2)]
        await delete_messages(message.chat.id, message_ids_to_delete)

    await state.clear()

    await message.answer(
        text=f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ <b>–ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        parse_mode='HTML',
        reply_markup=sup_admin_keyboard()
    )


@sup_admin_router.message(ActionState.inf_msg_entr, F.text)
async def information_message_entry(message: Message, state: FSMContext):
    await state.update_data(
        inf_msg=message.text
    )

    data = await state.get_data()
    inf_msg = data.get('inf_msg')

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text=f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n<i>{inf_msg}</i>\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        parse_mode='HTML',
        reply_markup=make_row_keyboard_mutiple([
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]]
        )
    )

    await state.set_state(ActionState.inf_msg_success)


@sup_admin_router.message(ActionState.inf_msg_success, F.text.lower() == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def information_message_success(message: Message, state: FSMContext):
    data = await state.get_data()
    inf_msg = data.get('inf_msg')

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        reply_markup=sup_admin_keyboard()
    )

    employees = await get_all_employees_from_db()

    for employee in employees:
        await send_to(employee.tg_id, inf_msg)

    await state.set_state(ActionState.start_state)


@sup_admin_router.message(ActionState.inf_msg_success, F.text.lower() == "üîÑ –∏–∑–º–µ–Ω–∏—Ç—å")
async def information_message_re_enter(message: Message, state: FSMContext):
    await information_message(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
# @sup_admin_router.message(
#     F.text.lower() == "üé≠ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
#     UserManagState.user_manag
# )
# async def emloyee_role_change(message: Message, state: FSMContext):
#     await state.set_state(UserManagState.employee_change_role)
#
#     message_ids_to_delete = [message.message_id - i for i in range(2)]
#     await delete_messages(message.chat.id, message_ids_to_delete)
#
#     await message.answer(
#         text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å—é —Ä–æ–ª—å —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá",
#         reply_markup=make_row_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"])
#     )
#
# @sup_admin_router.message(UserManagState.employee_change_role, F.text)
# async def emloyee_role_change_entry(message: Message, state: FSMContext):
#     await state.update_data(
#         fio_change_msg=message.text
#     )
#
#     data = await state.get_data()
#     fio_change_msg = data.get('fio_change_msg')
#
#     message_ids_to_delete = [message.message_id - i for i in range(2)]
#     await delete_messages(message.chat.id, message_ids_to_delete)
#
#     await message.answer(
#         text=f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n<i>{fio_change_msg}</i>\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
#         parse_mode='HTML',
#         reply_markup=make_row_keyboard_mutiple([
#             ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å"],
#             ["‚ùå –û—Ç–º–µ–Ω–∞"]]
#         )
#     )
#
#     await state.set_state(UserManagState.employee_block_success)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
@sup_admin_router.message(
    F.text.lower() == "üîí –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    UserManagState.user_manag
)
async def emloyees_block(message: Message, state: FSMContext):
    await state.set_state(UserManagState.employee_block)

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üëá",
        reply_markup=make_row_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"])
    )


@sup_admin_router.message(UserManagState.employee_block_success, F.text.lower() == "üîÑ –∏–∑–º–µ–Ω–∏—Ç—å")
async def information_message_re_enter(message: Message, state: FSMContext):
    await emloyees_block(message, state)


@sup_admin_router.message(UserManagState.employee_block, F.text)
async def emloyees_block_entry(message: Message, state: FSMContext):
    await state.update_data(
        fio_block_msg=message.text
    )

    data = await state.get_data()
    fio_block_msg = data.get('fio_block_msg')

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text=f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n<i>{fio_block_msg}</i>\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        parse_mode='HTML',
        reply_markup=make_row_keyboard_mutiple([
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]]
        )
    )

    await state.set_state(UserManagState.employee_block_success)


@sup_admin_router.message(UserManagState.employee_block_success, F.text.lower() == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def emloyees_block_success(message: Message, state: FSMContext):
    data = await state.get_data()
    fio_block_msg = data.get('fio_block_msg')

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    block_result = await un_block_empolyee(fio_block_msg, 'block')
    if block_result:
        await message.answer(
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>{fio_block_msg}</i> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=sup_admin_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>{fio_block_msg}</i> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=sup_admin_keyboard(),
            parse_mode='HTML'
        )
    await state.clear()
    await state.set_state(ActionState.start_state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
@sup_admin_router.message(
    F.text.lower() == "üîì —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    UserManagState.user_manag
)
async def emloyees_unlock(message: Message, state: FSMContext):
    await state.set_state(UserManagState.employee_unlock)

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å üëá",
        reply_markup=make_row_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"])
    )


@sup_admin_router.message(UserManagState.employee_unlock_success, F.text.lower() == "üîÑ –∏–∑–º–µ–Ω–∏—Ç—å")
async def information_message_re_enter(message: Message, state: FSMContext):
    await emloyees_unlock(message, state)


@sup_admin_router.message(UserManagState.employee_unlock, F.text)
async def emloyees_unlock_entry(message: Message, state: FSMContext):
    await state.update_data(
        fio_unlock_msg=message.text
    )

    data = await state.get_data()
    fio_unlock_msg = data.get('fio_unlock_msg')

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    await message.answer(
        text=f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n<i>{fio_unlock_msg}</i>\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        parse_mode='HTML',
        reply_markup=make_row_keyboard_mutiple([
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]]
        )
    )

    await state.set_state(UserManagState.employee_unlock_success)


@sup_admin_router.message(UserManagState.employee_unlock_success, F.text.lower() == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def emloyees_unlock_success(message: Message, state: FSMContext):
    data = await state.get_data()
    fio_unlock_msg = data.get('fio_unlock_msg')

    message_ids_to_delete = [message.message_id - i for i in range(2)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    unlock_result = await un_block_empolyee(fio_unlock_msg, 'unlock')
    if unlock_result:
        await message.answer(
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>{fio_unlock_msg}</i> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=sup_admin_keyboard(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>{fio_unlock_msg}</i> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=sup_admin_keyboard(),
            parse_mode='HTML'
        )
    await state.clear()
    await state.set_state(ActionState.start_state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
@sup_admin_router.callback_query(F.data == "getLeftAdminList")
async def admin_list_callback_Left(callback: types.CallbackQuery, state: FSMContext):
    message_ids_to_delete = [callback.message.message_id - i for i in range(2)]
    await delete_messages(callback.message.chat.id, message_ids_to_delete)

    data = await state.get_data()
    list_page = data.get('admin_list_page') - 1
    if list_page < 0:
        list_page = data.get('admin_list_page_max')
    await state.update_data(admin_list_page=list_page)

    await admin_list_callback(callback, state)


@sup_admin_router.callback_query(F.data == "getRightAdminList")
async def admin_list_callback_Right(callback: types.CallbackQuery, state: FSMContext):
    message_ids_to_delete = [callback.message.message_id - i for i in range(2)]
    await delete_messages(callback.message.chat.id, message_ids_to_delete)

    data = await state.get_data()
    list_page = data.get('admin_list_page') + 1
    if list_page > data.get('admin_list_page_max'):
        list_page = 0
    await state.update_data(admin_list_page=list_page)

    await admin_list_callback(callback, state)


@sup_admin_router.callback_query(F.data == "getLeftEmployeeList")
async def emloyees_list_callback_Left(callback: types.CallbackQuery, state: FSMContext):
    message_ids_to_delete = [callback.message.message_id - i for i in range(2)]
    await delete_messages(callback.message.chat.id, message_ids_to_delete)

    data = await state.get_data()
    list_page = data.get('list_page') - 1
    if list_page < 0:
        list_page = data.get('list_page_max')
    await state.update_data(list_page=list_page)

    await emloyees_list_callback(callback, state)


@sup_admin_router.callback_query(F.data == "getRightEmployeeList")
async def emloyees_list_callback_Right(callback: types.CallbackQuery, state: FSMContext):
    message_ids_to_delete = [callback.message.message_id - i for i in range(2)]
    await delete_messages(callback.message.chat.id, message_ids_to_delete)

    data = await state.get_data()
    list_page = data.get('list_page') + 1
    if list_page > data.get('list_page_max'):
        list_page = 0
    await state.update_data(list_page=list_page)

    await emloyees_list_callback(callback, state)


@sup_admin_router.callback_query(F.data == "getEmployeesList")
async def emloyees_list_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ActionState.employee_list_state)
    employees_arr = await get_all_employees_list_from_db(["Administrator", "Employee"])

    message_ids_to_delete = [callback.message.message_id - i for i in range(1)]
    await delete_messages(callback.message.chat.id, message_ids_to_delete)

    if len(employees_arr) > 1:
        keyboard_items = [
            [{'text': 'üëà',
              'callback_data': "getLeftEmployeeList"},
             {'text': 'üëâ',
              'callback_data': "getRightEmployeeList"}],
            [{'text': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ü§ñ',
              'callback_data': "getAdminList"}]
        ]

        data = await state.get_data()
        list_page = data.get('list_page')

        await callback.message.answer(
            text="<b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
                 f"{employees_arr[list_page]}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=make_row_inline_keyboard_mutiple(keyboard_items)
        )
    else:
        keyboard_items = [
            {'text': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ü§ñ',
             'callback_data': "getAdminList"},
        ]

        await callback.message.answer(
            text="<b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
                 f"{employees_arr[0]}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=make_row_inline_keyboard(keyboard_items),
        )


@sup_admin_router.message(
    F.text.lower() == "üìã —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    UserManagState.user_manag
)
async def emloyees_list(message: Message, state: FSMContext):
    await state.set_state(ActionState.employee_list_state)
    employees_arr = await get_all_employees_list_from_db(["Administrator", "Employee"])

    await state.update_data(admins_list_page=0)

    await state.update_data(list_page=0)
    await state.update_data(list_page_max=len(employees_arr) - 1)

    message_ids_to_delete = [message.message_id - i for i in range(1)]
    await delete_messages(message.chat.id, message_ids_to_delete)

    if len(employees_arr) > 1:
        keyboard_items = [
            [{'text': 'üëà',
              'callback_data': "getLeftEmployeeList"},
             {'text': 'üëâ',
              'callback_data': "getRightEmployeeList"}],
            [{'text': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ü§ñ',
              'callback_data': "getAdminList"}]
        ]

        data = await state.get_data()
        list_page = data.get('list_page')
        await state.update_data(list_page=list_page)

        await message.answer(
            text="<b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
                 f"{employees_arr[list_page]}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=make_row_inline_keyboard_mutiple(keyboard_items)
        )
    else:
        keyboard_items = [
            {'text': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ü§ñ',
             'callback_data': "getAdminList"},
        ]

        await message.answer(
            text="<b>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
                 f"{employees_arr[0]}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=make_row_inline_keyboard_mutiple([keyboard_items])
        )


@sup_admin_router.callback_query(lambda c: c.data and c.data.startswith('getAdminList'))
async def admin_list_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ActionState.admin_list_state)
    admins_arr = await get_all_employees_list_from_db(["Administrator"])

    await state.update_data(admins_list_page_max=len(admins_arr) - 1)

    message_ids_to_delete = [callback.message.message_id - i for i in range(2)]
    await delete_messages(callback.message.chat.id, message_ids_to_delete)

    if len(admins_arr) > 1:
        keyboard_items = [
            [{'text': 'üëà',
              'callback_data': "getLeftAdminList"},
             {'text': 'üëâ',
              'callback_data': "getRightAdminList"}],
            [{'text': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ üë®‚Äçüíº',
              'callback_data': "getEmployeesList"}]
        ]

        data = await state.get_data()
        list_page = data.get('admins_list_page')
        await state.update_data(admins_list_page=list_page)

        await callback.message.answer(
            text="<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
                 f"{admins_arr[list_page]}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=make_row_inline_keyboard_mutiple(keyboard_items)
        )
    else:
        keyboard_items = [
            {'text': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ üë®‚Äçüíº',
             'callback_data': "getEmployeesList"},
        ]

        await callback.message.answer(
            text="<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
                 f"{admins_arr[0]}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=make_row_inline_keyboard(keyboard_items),
        )


# –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
@sup_admin_router.callback_query(lambda c: c.data and c.data.startswith(('accept_', 'reject_')))
async def process_callback(callback: types.CallbackQuery):
    action, tg_id = callback.data.split('_')
    lastname, firstname, patronymic = await get_user_FIO_from_db(tg_id)
    if action == 'accept':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_position_id(tg_id, 'Employee')

        await send_to(tg_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –í–∞–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å - <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b>')

        message_ids_to_delete = [callback.message.message_id - i for i in range(0, 2)]
        await delete_messages(callback.message.chat.id, message_ids_to_delete)

        await callback.message.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç <b>{lastname} {firstname} {patronymic}</b> –ø—Ä–∏–Ω—è—Ç.",
                                      parse_mode='HTML')
    elif action == 'reject':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update_position_id(tg_id, 'DEACTIVE')
        await send_to(tg_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–∞–∑–∞–ª –í–∞–º –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')

        message_ids_to_delete = [callback.message.message_id - i for i in range(0, 2)]
        await delete_messages(callback.message.chat.id, message_ids_to_delete)

        await callback.message.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç <b>{lastname} {firstname} {patronymic}</b> –æ—Ç–∫–ª–æ–Ω—ë–Ω.",
                                      parse_mode='HTML')

    await callback.answer()


@sup_admin_router.message(Command(commands=["cancel"]))
@sup_admin_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    # if EntryState.name_entry:
    #     await state.clear()
    #     await message.answer(
    #         text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
    #     )
    # else:
    #     await message.answer(
    #         text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
    #     )
    pass
